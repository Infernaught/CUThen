swagger: '2.0'
info:
  title: CU Then! API
  description: 'AI Matchmaking application, built during the Cloud and Big Data course at Columbia University.'
  version: 1.0.0
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /profile:
    get:
      summary: Get information of user given user id - Groups they are in, profile info, pending invites
      tags:
      - GetProfile
      operationId: getProfile
      parameters:
        - name: currentUserId
          in: body
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A valid set of user info
          schema:
            $ref: '#/definitions/UserInfo'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Change user information
      tags:
      - ModifyProfile
      operationId: modifyProfile
      parameters:
        - name: newFeatures
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProfileChanges'
      responses:
        '200':
          description: Validation
          schema:
            type: application/json
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /getMatchInfo:
    post:
      summary: Get information of a matched user and the current groups the master user is in
      tags:
        - GetMatchInfo
      operationId: getMatchInfo
      produces:
        - application/json
      parameters:
        - name: userMix
          in: body
          required: true
          schema:
            type: object
            properties: 
              masterUserId:
                type: string
              matchUserId:
                type: string
      responses:
        '200':
          description: A valid set of combined info
          schema:
            type: object
            properties: 
              matchUserProfile:
                $ref: "#/definitions/User"
              currentUserGroup:
                type: array
                items:
                  $ref: '#/definitions/Group'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /group:
    delete:
      summary: Delete group the user is in
      tags:
      - DeleteGroup
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Validation
          schema:
            type: application/json
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Make new group
      tags:
      - MakeGroup
      operationId: makeGroup
      parameters:
        - name: userIds
          in: body
          required: true
          schema:
            type: object
            properties: 
              groupLeader:
                type: integer
              groupMembers:
                type: array
                items: 
                  type: integer
      responses:
        '200':
          description: Group that is made
          schema:
            $ref: '#/definitions/Group'
            type: application/json
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /matchmaker:
    post:
      summary: CU Then! matchmaking endpoint.
      description: |
        This API takes in a user ID, fetches the user features, and passes them on to a matchmaking backend that returns a list of other users sorted by cosine similarity.
      tags:
        - Matchmaking
      operationId: matchUser
      produces:
        - application/json
      parameters:
        - name: UserId
          in: body
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A valid set of compatible users
          schema:
            $ref: '#/definitions/Compats'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /extendInvitation:
    post:
      summary: Extend invitation
      tags:
      - Invitations
      operationId: extendInvitation
      produces:
        - application/json
      parameters:
      - name: o_inv
        in: body
        required: true
        schema:
          $ref: '#/definitions/OutgoingInvitation'
      responses:
        '200':
          description: Validation that invitation has been extended
          schema:
            type: string
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /respondToInvitation:
    post:
      summary: Respond to invitation
      tags:
      - Invitations
      operationId: respondToInvitation
      produces:
        - application/json
      parameters:
      - name: i_inv
        in: body
        required: true
        schema:
          $ref: '#/definitions/IncomingInvitation'
      responses:
        '200':
          description: Y/N response depending on whether or not invitation was accepted
          schema:
            type: application/json
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /chat:
    post:
      summary: Chat with other users
      tags:
      - Chat
      operationId: chat
      produces:
        - application/json
      parameters:
      - name: chat
        in: body
        required: true
        schema:
          $ref: '#/definitions/ChatDiscussion'
      responses:
        '200':
          description: Gets the list of messages of the group chat, and append the user's own message if UserChatMessage in body is not None
          schema:
            type: array
            items: 
              $ref: "#/definitions/UserChatMessage"
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
definitions:
  User:
    type: object
    properties:
      userId:
        type: string
      userName:
        type: string
      userFeatures:
        type: array
        items:
          $ref: '#/definitions/Feature'
  UserInfo:
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/Group'
      userName:
        type: string
      userFeatures:
        type: array
        items:
          $ref: '#/definitions/Feature'
      pendingInvites:
        type: array
        items:
          $ref: '#/definitions/IncomingInvitation'
  Group:
    type: object
    properties:
      groupId:
        type: integer
      groupLeader:
        type: "#/definitions/User"
      groupMembers:
        type: array
        items:
          type: "#/definitions/User"
  Compats:
    type: object
    properties:
      compatibleUsers:
        type: array
        items:
          $ref: '#/definitions/User'
  Feature:
    type: object
    properties:
      featureName:
        type: string
      featureValue:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  OutgoingInvitation:
    type: object
    properties:
      invitee:
        type: "#/definitions/User"
      currentGroup:
        type: "#/definitions/Group"
  IncomingInvitation:
    type: object
    properties:
      invitingGroup:
        type: "#/definitions/Group"
      invitee:
        type: "#/definitions/User"
  ChatDiscussion:
    type: object
    properties:
      currentGroup:
        type: "#/definitions/Group"
      currentUser:
        type: "#/definitions/User"
      message:
        $ref: "#/definitions/UserChatMessage"
  ProfileChanges:
    type: object
    properties:
      currentUser:
        $ref: "#/definitions/User"
      newFeatures:
        type: array
        items:
          $ref: '#/definitions/Feature'
  UserChatMessage:
    type: object
    properties:
      userName:
        type: string
      text:
        type: string
      timestamp:
        type: string
        format: datetime
    
